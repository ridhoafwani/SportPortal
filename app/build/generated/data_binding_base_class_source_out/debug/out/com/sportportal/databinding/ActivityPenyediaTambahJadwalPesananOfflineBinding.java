// Generated by view binder compiler. Do not edit!
package com.sportportal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.sportportal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPenyediaTambahJadwalPesananOfflineBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton btnPesan;

  @NonNull
  public final Button btnReset;

  @NonNull
  public final TextInputEditText etWhen;

  @NonNull
  public final TextInputLayout etWhenView;

  @NonNull
  public final SwipeRefreshLayout refresh;

  @NonNull
  public final RecyclerView scheduleList;

  private ActivityPenyediaTambahJadwalPesananOfflineBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton btnPesan, @NonNull Button btnReset, @NonNull TextInputEditText etWhen,
      @NonNull TextInputLayout etWhenView, @NonNull SwipeRefreshLayout refresh,
      @NonNull RecyclerView scheduleList) {
    this.rootView = rootView;
    this.btnPesan = btnPesan;
    this.btnReset = btnReset;
    this.etWhen = etWhen;
    this.etWhenView = etWhenView;
    this.refresh = refresh;
    this.scheduleList = scheduleList;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPenyediaTambahJadwalPesananOfflineBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPenyediaTambahJadwalPesananOfflineBinding inflate(
      @NonNull LayoutInflater inflater, @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_penyedia_tambah_jadwal_pesanan_offline, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPenyediaTambahJadwalPesananOfflineBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_pesan;
      MaterialButton btnPesan = ViewBindings.findChildViewById(rootView, id);
      if (btnPesan == null) {
        break missingId;
      }

      id = R.id.btn_reset;
      Button btnReset = ViewBindings.findChildViewById(rootView, id);
      if (btnReset == null) {
        break missingId;
      }

      id = R.id.et_when;
      TextInputEditText etWhen = ViewBindings.findChildViewById(rootView, id);
      if (etWhen == null) {
        break missingId;
      }

      id = R.id.et_when_view;
      TextInputLayout etWhenView = ViewBindings.findChildViewById(rootView, id);
      if (etWhenView == null) {
        break missingId;
      }

      id = R.id.refresh;
      SwipeRefreshLayout refresh = ViewBindings.findChildViewById(rootView, id);
      if (refresh == null) {
        break missingId;
      }

      id = R.id.scheduleList;
      RecyclerView scheduleList = ViewBindings.findChildViewById(rootView, id);
      if (scheduleList == null) {
        break missingId;
      }

      return new ActivityPenyediaTambahJadwalPesananOfflineBinding((CoordinatorLayout) rootView,
          btnPesan, btnReset, etWhen, etWhenView, refresh, scheduleList);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
